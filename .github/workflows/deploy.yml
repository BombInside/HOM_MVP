name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest

    steps:
      # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
      - uses: actions/checkout@v4

      # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–¥–æ—Å—Ç—É–ø–∞ ---
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

      # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
      - name: Validate required GitHub Secrets
        env:
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üîç Validating required secrets..."
          REQUIRED_VARS=("DB_URL_STAGE" "JWT_SECRET_STAGE" "CORS_ORIGINS_STAGE" "REMOTE_HOST")
          for VAR in "${REQUIRED_VARS[@]}"; do
            VALUE="${!VAR}"
            if [ -z "$VALUE" ]; then
              echo "‚ùå Missing secret: $VAR"
              exit 1
            fi
            echo "‚úÖ $VAR present"
          done
          echo "‚úÖ All secrets are valid."

      # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
      - name: Prepare environment variables
        env:
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "üîß Preparing frontend API URL..."
          if [[ "$CORS_ORIGINS_STAGE" =~ :[0-9]+$ ]]; then
            echo "‚úÖ Port already present in CORS_ORIGINS_STAGE"
            echo "VITE_API_URL=${CORS_ORIGINS_STAGE}" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è No port in CORS_ORIGINS_STAGE, adding :8000"
            echo "VITE_API_URL=${CORS_ORIGINS_STAGE}:8000" >> $GITHUB_ENV
          fi
          echo "‚úÖ Final VITE_API_URL: $(grep VITE_API_URL $GITHUB_ENV)"

      # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
      - name: Push repo to droplet
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üì¶ Uploading project to server..."
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "deployer@$REMOTE_HOST:/home/deployer/dev/hom_mvp"

      # --- –°–æ–∑–¥–∞–Ω–∏–µ .env.stage –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
      - name: Write .env.stage on server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
          VITE_API_URL: ${{ env.VITE_API_URL }}
        run: |
          echo "üìù Writing .env.stage files on server..."
          ssh "deployer@${REMOTE_HOST}" bash -lc "set -e
            cd /home/deployer/dev/hom_mvp

            echo 'Creating backend .env.stage...'
            printf '%s\n' \
            APP_ENV=stage \
            DB_URL=${DB_URL_STAGE} \
            JWT_SECRET=${JWT_SECRET_STAGE} \
            JWT_EXPIRE_MIN=60 \
            CORS_ORIGINS=${CORS_ORIGINS_STAGE} \
            REDIS_URL=redis://redis:6379 \
            > .env.stage

            echo 'Creating frontend .env.stage...'
            mkdir -p frontend
            printf '%s\n' \
            VITE_API_URL=${VITE_API_URL} \
            VITE_APP_ENV=stage \
            > frontend/.env.stage

            echo '‚úÖ .env.stage files created.'
            echo '------------------------------------'
            echo 'Backend .env.stage (sanitized):'
            grep -v 'JWT_SECRET' .env.stage | sed 's/\(DB_URL=\).*/\1postgresql+asyncpg:\/\/***/'
            echo '------------------------------------'
            echo 'Frontend .env.stage:'
            cat frontend/.env.stage
            echo '------------------------------------'
          "

      # --- –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ backend ---
      - name: Build backend
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp
            echo "üß± Building backend..."
            docker compose -f docker-compose.stage.yml build backend
          '

      # --- –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ frontend ---
      - name: Build frontend
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp
            echo "üß± Building frontend..."
            docker compose -f docker-compose.stage.yml build frontend
          '

      # --- –î–µ–ø–ª–æ–π ---
      - name: Compose up (stage)
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üöÄ Deploying to stage..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp

            echo "üß± Pulling latest images..."
            docker compose -f docker-compose.stage.yml pull || true

            echo "üöÄ Starting containers..."
            docker compose -f docker-compose.stage.yml up -d --remove-orphans

            echo "üîç Checking container status..."
            docker compose -f docker-compose.stage.yml ps

            echo "üìú Showing last 50 backend logs..."
            docker compose -f docker-compose.stage.yml logs backend --tail 50 || true
          '
