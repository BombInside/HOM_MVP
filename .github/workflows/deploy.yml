name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest

    steps:
      # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
      - uses: actions/checkout@v4

      # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–¥–æ—Å—Ç—É–ø–∞ ---
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

      # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ ---
      - name: Validate required GitHub Secrets
        env:
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "Validating secrets..."
          REQUIRED_VARS=("DB_URL_STAGE" "JWT_SECRET_STAGE" "CORS_ORIGINS_STAGE" "REMOTE_HOST")
          for VAR in "${REQUIRED_VARS[@]}"; do
            VALUE="${!VAR}"
            if [ -z "$VALUE" ]; then
              echo "‚ùå Missing secret: $VAR"
              exit 1
            fi
            echo "‚úÖ $VAR present"
          done
          echo "‚úÖ All required secrets are present."

      # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.stage ---
      - name: Validate .env.stage content
        env:
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "Validating .env.stage..."
          echo "CORS_ORIGINS=$CORS_ORIGINS_STAGE"
          
          if [ -z "$DB_URL_STAGE" ]; then
            echo "‚ùå DB_URL_STAGE is empty!"
            exit 1
          fi
          if [ -z "$JWT_SECRET_STAGE" ]; then
            echo "‚ùå JWT_SECRET_STAGE is empty!"
            exit 1
          fi
          if [ -z "$CORS_ORIGINS_STAGE" ]; then
            echo "‚ùå CORS_ORIGINS_STAGE is empty!"
            exit 1
          fi
          if ! echo "$CORS_ORIGINS_STAGE" | grep -E '^(\[|http)'; then
            echo "‚ùå Invalid CORS_ORIGINS_STAGE format. Should be JSON or URL."
            exit 1
          fi
          echo "‚úÖ .env.stage variables look good."

      # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
      - name: Push repo to droplet
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üì¶ Uploading project to server..."
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "deployer@$REMOTE_HOST:/home/deployer/dev/hom_mvp"

      # --- –°–æ–∑–¥–∞–Ω–∏–µ .env.stage –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
      - name: Write .env.stage on server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "üìù Writing .env.stage file on server..."
          ssh "deployer@${REMOTE_HOST}" <<'EOF'
            set -e
            cd /home/deployer/dev/hom_mvp

            cat > .env.stage <<EOT
            APP_ENV=stage
            DB_URL=${DB_URL_STAGE}
            JWT_SECRET=${JWT_SECRET_STAGE}
            JWT_EXPIRE_MIN=60
            CORS_ORIGINS=${CORS_ORIGINS_STAGE}
            REDIS_URL=redis://redis:6379
            EOT

            echo "‚úÖ .env.stage created."
            echo "------------------------------------"
            echo "üìÑ Contents of .env.stage:"
            cat .env.stage | sed 's/\(JWT_SECRET=\).*/\1[REDACTED]/'
            echo "------------------------------------"
          EOF

      # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ backend ---
      - name: Ensure backend rebuilt if needed
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üîç Checking backend build state..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp

            echo "üîé Checking if backend image exists..."
            if ! docker image inspect hom_mvp-backend >/dev/null 2>&1; then
              echo "‚ùå Backend image not found. Rebuilding..."
              docker compose -f docker-compose.stage.yml build backend
            else
              echo "‚úÖ Backend image exists. Checking for code changes..."
              docker compose -f docker-compose.stage.yml build backend --pull
            fi
          '

      # --- –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π ---
      - name: Compose up (stage)
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "üöÄ Deploying to stage..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp

            echo "üß± Pulling latest images..."
            docker compose -f docker-compose.stage.yml pull || true

            echo "üöÄ Starting containers..."
            docker compose -f docker-compose.stage.yml up -d --remove-orphans

            echo "üîç Checking container status..."
            docker compose -f docker-compose.stage.yml ps

            echo "üìú Showing last 50 backend logs..."
            docker compose -f docker-compose.stage.yml logs backend --tail 50 || true
          '
