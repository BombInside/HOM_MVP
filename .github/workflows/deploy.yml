name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

      - name: Push repo to droplet
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "deployer@$REMOTE_HOST:/home/deployer/dev/hom_mvp"

      # 🔍 Проверяем, что все нужные секреты заданы
      - name: Validate required GitHub Secrets
        run: |
          echo "Validating secrets..."
          REQUIRED_VARS=("DB_URL_STAGE" "JWT_SECRET_STAGE" "CORS_ORIGINS_STAGE" "REMOTE_HOST")
          for VAR in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!VAR}" ]; then
              echo "❌ Missing secret: $VAR"
              exit 1
            fi
          done
          echo "✅ All required secrets are present."

      # 🧪 Проверяем содержимое .env.stage до деплоя
      - name: Validate .env.stage content
        env:
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "Validating .env.stage..."
          echo "CORS_ORIGINS=$CORS_ORIGINS_STAGE"
          
          # Проверяем, что переменные не пусты
          if [ -z "$DB_URL_STAGE" ]; then
            echo "❌ DB_URL_STAGE is empty!"
            exit 1
          fi
          if [ -z "$JWT_SECRET_STAGE" ]; then
            echo "❌ JWT_SECRET_STAGE is empty!"
            exit 1
          fi
          if [ -z "$CORS_ORIGINS_STAGE" ]; then
            echo "❌ CORS_ORIGINS_STAGE is empty!"
            exit 1
          fi

          # Проверяем корректность CORS (JSON или URL)
          if ! echo "$CORS_ORIGINS_STAGE" | grep -E '^(\[|http)'; then
            echo "❌ Invalid CORS_ORIGINS_STAGE format. Should be JSON or URL."
            exit 1
          fi

          echo "✅ .env.stage variables look good."

      - name: Write .env.stage on server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          ssh "deployer@$REMOTE_HOST" bash -lc "
            set -e
            cd /home/deployer/dev/hom_mvp
            cat > .env.stage <<EOF
            APP_ENV=stage
            DB_URL=${DB_URL_STAGE}
            JWT_SECRET=${JWT_SECRET_STAGE}
            JWT_EXPIRE_MIN=60
            CORS_ORIGINS=${CORS_ORIGINS_STAGE}
            REDIS_URL=redis://redis:6379
            EOF
          "

      - name: Compose up (stage)
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          ssh "deployer@$REMOTE_HOST" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp
            echo "🧱 Building and starting containers..."
            docker compose -f docker-compose.stage.yml pull || true
            docker compose -f docker-compose.stage.yml up -d --build
            docker compose -f docker-compose.stage.yml ps
          '
