name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # -----------------------------
      # 1️⃣ Настройка SSH-доступа
      # -----------------------------
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

      # -----------------------------
      # 2️⃣ Копируем проект на сервер
      # -----------------------------
      - name: Push repo to droplet
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "📦 Синхронизирую проект с сервером..."
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "deployer@$REMOTE_HOST:/home/deployer/dev/hom_mvp"

      # -----------------------------
      # 3️⃣ Создаём .env.stage
      # -----------------------------
      - name: Write .env.stage on server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "⚙️ Создаю .env.stage на сервере..."
          ssh "deployer@$REMOTE_HOST" bash -lc "
            set -e
            cd /home/deployer/dev/hom_mvp
            cat > .env.stage <<EOF
            APP_ENV=stage
            DB_URL=${DB_URL_STAGE}
            JWT_SECRET=${JWT_SECRET_STAGE}
            JWT_EXPIRE_MIN=60
            CORS_ORIGINS=${CORS_ORIGINS_STAGE}
            REDIS_URL=redis://redis:6379
            EOF
          "

      # -----------------------------
      # 4️⃣ Проверяем содержимое .env.stage
      # -----------------------------
      - name: Verify .env.stage content
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🔍 Проверяю .env.stage..."
          ssh "deployer@$REMOTE_HOST" bash -lc "
            set -e
            cd /home/deployer/dev/hom_mvp
            if [ ! -s .env.stage ]; then
              echo '❌ .env.stage пустой или не найден!'
              exit 1
            fi

            echo '✅ .env.stage существует и содержит данные:'
            grep -v 'JWT_SECRET' .env.stage || true
          "

      # -----------------------------
      # 5️⃣ Пересобираем/обновляем backend (если изменился)
      # -----------------------------
      - name: Rebuild & restart containers if needed
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🚀 Проверяю и пересобираю контейнеры..."
          ssh "deployer@$REMOTE_HOST" bash -lc "
            set -e
            cd /home/deployer/dev/hom_mvp

            echo '🔹 Проверяю изменения backend...'
            if git diff --quiet HEAD^ HEAD backend; then
              echo '✅ Backend не изменился — пересборка не требуется.'
            else
              echo '🛠 Backend изменился — пересобираю контейнер...'
              docker compose -f docker-compose.stage.yml build backend
            fi

            echo '🔹 Запускаю контейнеры...'
            docker compose -f docker-compose.stage.yml pull || true
            docker compose -f docker-compose.stage.yml up -d
            docker compose -f docker-compose.stage.yml ps
          "

      # -----------------------------
      # 6️⃣ Проверка статуса backend
      # -----------------------------
      - name: Health check backend
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🩺 Проверяю /health endpoint..."
          ssh "deployer@$REMOTE_HOST" bash -lc "
            sleep 10
            curl -s http://localhost:8000/health || echo '⚠️ Backend не ответил'
          "
