name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest

    steps:
      # --- Клонирование репозитория ---
      - uses: actions/checkout@v4

      # --- Настройка SSH-доступа ---
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

      # --- Проверка обязательных секретов ---
      - name: Validate required GitHub Secrets
        env:
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🔍 Validating required secrets..."
          REQUIRED_VARS=("DB_URL_STAGE" "JWT_SECRET_STAGE" "CORS_ORIGINS_STAGE" "REMOTE_HOST")
          for VAR in "${REQUIRED_VARS[@]}"; do
            VALUE="${!VAR}"
            if [ -z "$VALUE" ]; then
              echo "❌ Missing secret: $VAR"
              exit 1
            fi
            echo "✅ $VAR is present"
          done
          echo "✅ All required secrets are present."

      # --- Загрузка проекта на сервер ---
      - name: Push repo to droplet
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "📦 Uploading project to server..."
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ "deployer@$REMOTE_HOST:/home/deployer/dev/hom_mvp"

      # --- Создание .env.stage для backend и frontend ---
      - name: Write .env.stage files on server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL_STAGE: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET_STAGE: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS_STAGE: ${{ secrets.CORS_ORIGINS_STAGE }}
        run: |
          echo "📝 Writing .env.stage files on server..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp

            echo "Creating backend .env.stage..."
            printf "%s\n" \
            "APP_ENV=stage" \
            "DB_URL=${DB_URL_STAGE}" \
            "JWT_SECRET=${JWT_SECRET_STAGE}" \
            "JWT_EXPIRE_MIN=60" \
            "CORS_ORIGINS=${CORS_ORIGINS_STAGE}" \
            "REDIS_URL=redis://redis:6379" \
            > .env.stage

            echo "Creating frontend .env.stage..."
            mkdir -p frontend
            printf "%s\n" \
            "VITE_API_URL=${CORS_ORIGINS_STAGE}" \
            "VITE_APP_ENV=stage" \
            > frontend/.env.stage

            echo "✅ Environment files created successfully."
            echo "------------------------------------"
            echo "Backend .env.stage (sanitized):"
            sed "s/\(JWT_SECRET=\).*/\1[REDACTED]/" .env.stage
            echo "------------------------------------"
            echo "Frontend .env.stage:"
            cat frontend/.env.stage
            echo "------------------------------------"

            echo "🔍 Debugging backend .env.stage (showing raw chars):"
            cat -A .env.stage
          '

      # --- Проверка и пересборка backend ---
      - name: Ensure backend rebuilt if needed
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🔍 Checking backend image..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp
            if ! docker image inspect hom_mvp-backend >/dev/null 2>&1; then
              echo "❌ Backend image not found, building..."
              docker compose -f docker-compose.stage.yml build backend
            else
              echo "✅ Backend image exists, rebuilding to ensure up-to-date code..."
              docker compose -f docker-compose.stage.yml build backend --pull
            fi
          '

      # --- Проверка и пересборка frontend ---
      - name: Ensure frontend rebuilt if needed
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🔍 Checking frontend image..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp
            if ! docker image inspect hom_mvp-frontend >/dev/null 2>&1; then
              echo "❌ Frontend image not found, building..."
              docker compose -f docker-compose.stage.yml build frontend
            else
              echo "✅ Frontend image exists, rebuilding to include updated env..."
              docker compose -f docker-compose.stage.yml build frontend --pull
            fi
          '

      # --- Финальный деплой ---
      - name: Compose up (stage)
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "🚀 Deploying to stage..."
          ssh "deployer@${REMOTE_HOST}" bash -lc '
            set -e
            cd /home/deployer/dev/hom_mvp

            echo "🧱 Pulling latest images..."
            docker compose -f docker-compose.stage.yml pull || true

            echo "🚀 Starting containers..."
            docker compose -f docker-compose.stage.yml up -d --remove-orphans

            echo "🔍 Checking container status..."
            docker compose -f docker-compose.stage.yml ps

            echo "📜 Showing last 50 backend logs..."
            docker compose -f docker-compose.stage.yml logs backend --tail 50 || true
          '
