name: ci

permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main"]
  pull_request: {}


jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build
        run: python -m compileall app

  # üê≥ Docker build job
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
      - name: Set lowercase repository name
        id: repo_name
        shell: bash
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LOWER=$REPO_LOWER" >> "$GITHUB_OUTPUT"

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Images to GHCR
        env:
          REPO_LOWER: ${{ steps.repo_name.outputs.REPO_LOWER }}
        run: |
          echo "Building and pushing images for: ghcr.io/$REPO_LOWER"
          docker build -t ghcr.io/$REPO_LOWER/hom-backend:main ./backend
          docker build -t ghcr.io/$REPO_LOWER/hom-frontend:main ./frontend

          docker push ghcr.io/$REPO_LOWER/hom-backend:main
          docker push ghcr.io/$REPO_LOWER/hom-frontend:main


  # üöÄ Deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      # üí° –ù–û–í–´–ô –®–ê–ì: –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ SSH
      - name: Define deployment environment variables
        id: deploy_env
        shell: bash
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LOWER=$REPO_LOWER" >> "$GITHUB_OUTPUT"
          echo "DB_URL_STAGE=${{ secrets.DB_URL_STAGE }}" >> "$GITHUB_OUTPUT"
          echo "JWT_SECRET_STAGE=${{ secrets.JWT_SECRET_STAGE }}" >> "$GITHUB_OUTPUT"
          echo "CORS_ORIGINS_STAGE=${{ secrets.CORS_ORIGINS_STAGE }}" >> "$GITHUB_OUTPUT"
          echo "REMOTE_HOST=${{ secrets.REMOTE_HOST }}" >> "$GITHUB_OUTPUT"

      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.deploy_env.outputs.REMOTE_HOST }}
          username: deployer
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
          envs: REPO_LOWER,DB_URL_STAGE,JWT_SECRET_STAGE,CORS_ORIGINS_STAGE,REMOTE_HOST
          script: |
            # set -euo pipefail # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            set -e # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ set -e (–≤—ã–π—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ), —Ç–∞–∫ –∫–∞–∫ -u –≤—ã–∑–≤–∞–ª –ø—Ä–æ–±–ª–µ–º—É

            DEPLOY_DIR="/var/www/hom_mvp/stage"
            # üí° –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REPO_LOWER —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞
            IMAGE_REPO="ghcr.io/${REPO_LOWER}"

            echo ">>> Creating stage.env on remote server..."
            mkdir -p "${DEPLOY_DIR}"
            cd "${DEPLOY_DIR}"

            # üí° –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ HEREDOC
            cat <<EOF > stage.env
            DB_URL=${DB_URL_STAGE}
            JWT_SECRET=${JWT_SECRET_STAGE}
            CORS_ORIGINS=${CORS_ORIGINS_STAGE}
            APP_ENV=staging
            JWT_EXPIRE_MIN=60
            VITE_API_URL=http://${REMOTE_HOST}:8000
            BACKEND_IMAGE=${IMAGE_REPO}/hom-backend:main
            FRONTEND_IMAGE=${IMAGE_REPO}/hom-frontend:main
            EOF

            echo ">>> Deploying docker-compose.stage.yml..."
            docker compose -f docker-compose.stage.yml pull
            docker compose -f docker-compose.stage.yml up -d --force-recreate

            echo "‚úÖ Deployment to Droplet finished successfully."