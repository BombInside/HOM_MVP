name: ci
on:
  push: { branches: ["main"] }
  pull_request: {}
jobs:
  backend:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build
        run: python -m compileall app
        
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend] # Зависит от успешного прохождения CI
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      
      # 1. Создаем переменную со строчным именем репозитория для GHCR
      - name: Set lowercase repository name
        id: repo_name
        run: echo "REPOSITORY_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # Используем GITHUB_TOKEN для аутентификации в GHCR
          password: ${{ secrets.GITHUB_TOKEN }} 
          
      - name: Build and Push Images to GHCR
        env:
          # Получаем строковое имя репозитория
          REPO_LOWER: ${{ steps.repo_name.outputs.REPOSITORY_NAME_LOWER }}
        run: |
          # Тегируем и пушим образы с использованием строчного имени
          docker build -t ghcr.io/$REPO_LOWER/hom-backend:main ./backend
          docker build -t ghcr.io/$REPO_LOWER/hom-frontend:main ./frontend
          
          docker push ghcr.io/$REPO_LOWER/hom-backend:main
          docker push ghcr.io/$REPO_LOWER/hom-frontend:main

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    # Развертываем только при пуше в main
    if: github.ref == 'refs/heads/main' 
    steps:
      - uses: actions/checkout@v4
      
      # 1. Создаем переменную со строчным именем репозитория для скрипта SSH
      - name: Set lowercase repository name
        id: repo_name
        run: echo "REPOSITORY_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        
      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: deployer # Убедитесь, что этот пользователь существует на Droplet
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Настройки
            DEPLOY_DIR="/var/www/hom_mvp/stage" # Обновите на ваш путь на Droplet
            IMAGE_REPO="ghcr.io/${{ steps.repo_name.outputs.REPOSITORY_NAME_LOWER }}"

            # 2. Создаем stage.env на Droplet, используя секреты GitHub
            echo "Creating stage.env on remote server..."
            
            # Внимание: Убедитесь, что все эти переменные настроены в GitHub Secrets
            STAGING_ENV_VARS=$(cat <<EOF
            # --- Secrets from GitHub ---
            DB_URL=${{ secrets.DB_URL_STAGE }}
            JWT_SECRET=${{ secrets.JWT_SECRET_STAGE }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS_STAGE }}
            
            # --- Fixed Config ---
            APP_ENV=staging
            JWT_EXPIRE_MIN=60
            # Используем REMOTE_HOST для VITE_API_URL
            VITE_API_URL=http://${{ secrets.REMOTE_HOST }}:8000
            
            # --- Docker Image References for docker-compose.stage.yml ---
            BACKEND_IMAGE=${IMAGE_REPO}/hom-backend:main
            FRONTEND_IMAGE=${IMAGE_REPO}/hom-frontend:main
EOF
            

            # Переходим в директорию и создаем файл stage.env
            cd ${DEPLOY_DIR} || exit 1
            echo "$STAGING_ENV_VARS" > stage.env
            
            # 3. Выполняем развертывание с помощью Docker Compose
            # Предполагается, что docker-compose.stage.yml уже существует в DEPLOY_DIR
            echo "Running deployment..."
            docker compose -f docker-compose.stage.yml pull
            docker compose -f docker-compose.stage.yml up -d --force-recreate
            
            echo "Deployment to Droplet finished successfully."