name: ci
on:
  push: { branches: ["main"] }
  pull_request: {}
jobs:
  backend:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build
        run: python -m compileall app
        
  # Измененный docker-build job для подготовки к пушу в GHCR
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and Push Images to GHCR
        run: |
          # Тегируем образы для GHCR с тегом 'main'
          docker build -t ghcr.io/${{ github.repository }}/hom-backend:main ./backend
          docker build -t ghcr.io/${{ github.repository }}/hom-frontend:main ./frontend
          
          # Пушим образы
          docker push ghcr.io/${{ github.repository }}/hom-backend:main
          docker push ghcr.io/${{ github.repository }}/hom-frontend:main

  # Новый job для Continuous Deployment (заменяет логику Vault)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, backend] # Зависит от успешного билда и тестов
    if: github.ref == 'refs/heads/main' # Развертываем только при пуше в main
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: deployer # Убедитесь, что пользователь 'deployer' существует на Droplet
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            DEPLOY_DIR="/var/www/hom_mvp/stage" # Используйте путь, который вы настроили на Droplet
            IMAGE_REPO="ghcr.io/${{ github.repository }}"

            # 1. Создаем stage.env на Droplet, используя секреты GitHub
            echo "Creating stage.env on remote server..."
            
            # Внимание: Эта переменная окружения должна быть настроена в GitHub Secrets
            STAGING_ENV_VARS=$(cat <<EOF
            # --- Secrets from GitHub ---
            DB_URL=${{ secrets.DB_URL_STAGE }}
            JWT_SECRET=${{ secrets.JWT_SECRET_STAGE }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS_STAGE }}
            
            # --- Fixed Config ---
            APP_ENV=staging
            JWT_EXPIRE_MIN=60
            VITE_API_URL=http://${{ secrets.REMOTE_HOST }}:8000
            
            # --- Docker Image References for docker-compose.stage.yml ---
            BACKEND_IMAGE=${IMAGE_REPO}/hom-backend:main
            FRONTEND_IMAGE=${IMAGE_REPO}/hom-frontend:main
            EOF
            )

            cd ${DEPLOY_DIR} || exit 1
            echo "$STAGING_ENV_VARS" > stage.env
            
            # 2. Выполняем развертывание с помощью Docker Compose
            # Предполагается, что docker-compose.stage.yml уже существует в DEPLOY_DIR
            echo "Running deployment..."
            docker compose -f docker-compose.stage.yml pull
            docker compose -f docker-compose.stage.yml up -d --force-recreate
            
            echo "Deployment to Droplet finished successfully."