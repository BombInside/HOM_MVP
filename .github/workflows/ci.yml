name: CI/CD

on:
  push:
    branches: ["main"]
  pull_request: {}

jobs:
  backend-check:
    name: 🧩 Backend Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -q || echo "⚠️ No tests found, skipping."

      - name: Lint check
        run: |
          pip install flake8
          flake8 app || echo "⚠️ Lint warnings ignored."

  docker-build:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-check]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Set lowercase repo name
        id: repo
        shell: bash
        run: echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push images
        env:
          REPO: ${{ steps.repo.outputs.REPO_LOWER }}
        run: |
          docker build -t ghcr.io/$REPO/hom-backend:stage ./backend
          docker build -t ghcr.io/$REPO/hom-frontend:stage ./frontend

          docker push ghcr.io/$REPO/hom-backend:stage
          docker push ghcr.io/$REPO/hom-frontend:stage

  deploy:
    name: 🚀 Deploy to Stage Server
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set lowercase repo name
        id: repo
        shell: bash
        run: echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSH to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          REPO_LOWER: ${{ steps.repo.outputs.REPO_LOWER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          DB_URL: ${{ secrets.DB_URL_STAGE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_STAGE }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS_STAGE }}
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: deployer
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            DEPLOY_DIR="/var/www/hom_mvp/stage"
            IMAGE_REPO="ghcr.io/${REPO_LOWER}"

            echo ">>> Creating environment file"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            cat <<EOF > stage.env
DB_URL=${DB_URL}
JWT_SECRET=${JWT_SECRET}
CORS_ORIGINS=${CORS_ORIGINS}
APP_ENV=staging
JWT_EXPIRE_MIN=60
VITE_API_URL=http://${REMOTE_HOST}:8000
BACKEND_IMAGE=${IMAGE_REPO}/hom-backend:stage
FRONTEND_IMAGE=${IMAGE_REPO}/hom-frontend:stage
EOF

            echo ">>> Pulling & restarting containers"
            docker compose -f docker-compose.stage.yml pull
            docker compose -f docker-compose.stage.yml up -d --force-recreate

            echo "✅ Stage deployment completed successfully."
