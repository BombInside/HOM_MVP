services:
  postgres:
    image: postgres:15-alpine
    container_name: hom_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-hom_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hom_pass}
      POSTGRES_DB: ${POSTGRES_DB:-hom_db}
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hom_user} -d ${POSTGRES_DB:-hom_db}"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: hom_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

  backend:
    image: ghcr.io/${OWNER_OVERRIDE:-${GITHUB_OWNER}}/hom-backend:latest
    container_name: hom_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_ENV: prod
      DB_URL: ${DB_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_MIN: ${JWT_EXPIRE_MIN:-60}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://$DOMAIN, http://$DOMAIN, http://localhost:5173}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    ports:
      - "8000:8000"     # Внешний доступ к API (можно убрать, если пойдешь через Nginx)
    # Без volume: в проде читаем код из образа

  frontend:
    image: ghcr.io/${OWNER_OVERRIDE:-${GITHUB_OWNER}}/hom-frontend:latest
    container_name: hom_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - NGINX_PORT=80
      - VITE_API_URL=${PUBLIC_API_URL:-http://$DOMAIN:8000}
    ports:
      - "80:80"

volumes:
  pg-data:
  redis-data:
