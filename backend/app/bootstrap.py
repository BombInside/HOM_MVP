# Bootstrap utility to ensure database exists and seed admin user and roles.
# EN: Removed create_async_engine and text imports (no need to manually create DB)
# RU: –£–¥–∞–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã create_async_engine –∏ text (–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –ë–î)
from sqlmodel import select
import asyncio
from .config import settings
from .db import async_session
from .models import User, Role
from .auth import hash_password

# üí° EN: Removed 'async def ensure_db_exists()' as Postgres container creates the DB automatically.
# üí° RU: –£–¥–∞–ª–µ–Ω–∞ 'async def ensure_db_exists()', —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Postgres —Å–æ–∑–¥–∞–µ—Ç –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

async def seed_admin():
    # EN: Only seed admin user and roles in development environment (SECURITY FIX)
    # RU: –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò)
    if settings.app_env != "dev":
        # EN: Log that seeding is skipped
        # RU: –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ seeding –ø—Ä–æ–ø—É—â–µ–Ω
        print("Skipping admin seed and role creation outside of development environment.")
        return

    async with async_session() as session:
        # EN: Role creation logic
        # RU: –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
        for rn in ["Operator", "Technician", "Supervisor", "Manager", "Admin", "SystemAdmin"]:
            res = await session.execute(select(Role).where(Role.name == rn))
            if not res.scalar_one_or_none():
                session.add(Role(name=rn, description=f"Role {rn}"))
                
        # EN: Admin user creation logic
        # RU: –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res = await session.execute(select(User).where(User.email=="admin@hom.local"))
        if not res.scalar_one_or_none():
            session.add(User(email="admin@hom.local", hashed_password=hash_password("admin123")))
        await session.commit()

async def main():
    # EN: Removed call to ensure_db_exists
    # RU: –£–¥–∞–ª–µ–Ω –≤—ã–∑–æ–≤ ensure_db_exists
    await seed_admin()

if __name__ == "__main__":
    asyncio.run(main())