from typing import Optional, List
from datetime import datetime
from sqlmodel import SQLModel, Field, Relationship


# ==========================
#  –ë–∞–∑–æ–≤—ã–µ —Å–≤—è–∑–∏ Many-to-Many
# ==========================

class UserRoleLink(SQLModel, table=True):
    """–°–≤—è–∑—å –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏."""
    user_id: Optional[int] = Field(default=None, foreign_key="user.id", primary_key=True)
    role_id: Optional[int] = Field(default=None, foreign_key="role.id", primary_key=True)


class RolePermissionLink(SQLModel, table=True):
    """–°–≤—è–∑—å –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏."""
    role_id: Optional[int] = Field(default=None, foreign_key="role.id", primary_key=True)
    permission_id: Optional[int] = Field(default=None, foreign_key="permission.id", primary_key=True)


# ==========================
#  –ú–æ–¥–µ–ª—å Permission (–ø—Ä–∞–≤–∞)
# ==========================

class Permission(SQLModel, table=True):
    """–ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ (Permission)."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True, unique=True)
    description: Optional[str] = None

    roles: List["Role"] = Relationship(back_populates="permissions", link_model=RolePermissionLink)


# ==========================
#  –ú–æ–¥–µ–ª—å Role (—Ä–æ–ª—å)
# ==========================

class Role(SQLModel, table=True):
    """–†–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ (admin, operator, viewer, developer)."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True, unique=True)
    description: Optional[str] = None

    users: List["User"] = Relationship(back_populates="roles", link_model=UserRoleLink)
    permissions: List[Permission] = Relationship(back_populates="roles", link_model=RolePermissionLink)


# ==========================
#  –ú–æ–¥–µ–ª—å User (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
# ==========================

class User(SQLModel, table=True):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã."""
    id: Optional[int] = Field(default=None, primary_key=True)
    email: str = Field(index=True, unique=True)
    hashed_password: str
    full_name: Optional[str] = None
    is_active: bool = Field(default=True)
    created_at: datetime = Field(default_factory=datetime.utcnow)

    roles: List[Role] = Relationship(back_populates="users", link_model=UserRoleLink)


# ==========================
#  –ú–æ–¥–µ–ª—å Machine
# ==========================

class Machine(SQLModel, table=True):
    """–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True, unique=True)
    status: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)


# ==========================
#  –ú–æ–¥–µ–ª—å Line (–Ω–æ–≤–∞—è)
# ==========================

class Line(SQLModel, table=True):
    """
    –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –∏–ª–∏ –ø–æ—Ç–æ–∫.
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GraphQL schema.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True, unique=True)
    description: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)


# ==========================
#  RBACSeed (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π)
# ==========================

class RBACSeed:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö."""
    DEFAULT_ROLES = {
        "admin": {
            "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã",
            "permissions": ["manage_users", "manage_roles", "view_dashboard", "edit_settings", "view_logs"],
        },
        "operator": {
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            "permissions": ["view_dashboard", "manage_tasks", "view_logs"],
        },
        "viewer": {
            "description": "–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
            "permissions": ["view_dashboard", "view_logs"],
        },
        "developer": {
            "description": "–î–æ—Å—Ç—É–ø –∫ API –∏ DevOps-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º",
            "permissions": ["view_dashboard", "use_api", "deploy_code"],
        },
    }

    @classmethod
    async def seed(cls, session) -> None:
        from sqlalchemy import select

        result = await session.execute(select(Role))
        existing_roles = result.scalars().all()
        if existing_roles:
            print("üîÅ RBAC —Ä–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.")
            return

        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")

        permissions_map: dict[str, Permission] = {}
        for role_data in cls.DEFAULT_ROLES.values():
            for perm_name in role_data["permissions"]:
                if perm_name not in permissions_map:
                    perm = Permission(name=perm_name, description=f"Permission: {perm_name}")
                    session.add(perm)
                    permissions_map[perm_name] = perm

        await session.commit()

        result = await session.execute(select(Permission))
        permissions_by_name = {p.name: p for p in result.scalars().all()}

        for role_name, role_data in cls.DEFAULT_ROLES.items():
            role = Role(name=role_name, description=role_data["description"])
            role.permissions = [permissions_by_name[p] for p in role_data["permissions"]]
            session.add(role)

        await session.commit()
        print("‚úÖ RBAC —Ä–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")


__all__ = [
    "User",
    "Role",
    "Permission",
    "Machine",
    "Line",
    "UserRoleLink",
    "RolePermissionLink",
    "RBACSeed",
]
