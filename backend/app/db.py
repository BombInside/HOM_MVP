import os
from typing import AsyncGenerator

from sqlmodel import SQLModel
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

# =====================================================
# ‚úÖ DATABASE CONFIGURATION
# =====================================================
DATABASE_URL = os.getenv(
    "DB_URL",
    "postgresql+asyncpg://hom_user:hom_pass@postgres:5432/hom_db"
)


def get_db_url() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Alembic)."""
    return DATABASE_URL


# =====================================================
# ‚úÖ SQLAlchemy engine & session
# =====================================================
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

async_session_maker = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# =====================================================
# ‚úÖ Dependency –¥–ª—è FastAPI
# =====================================================
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ SQLAlchemy"""
    async with async_session_maker() as session:
        yield session


# =====================================================
# ‚úÖ DB Initialization
# =====================================================
async def init_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–¥–ª—è dev-—Ä–µ–∂–∏–º–∞)"""
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)


# =====================================================
# ‚úÖ BACKWARD COMPATIBILITY (–¥–ª—è GraphQL)
# =====================================================
async_session = async_session_maker  # üëà –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
