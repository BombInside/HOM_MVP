import asyncio
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlmodel import SQLModel
from app.config import settings
from app.models import *  # noqa: F401, F403

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ ---
async_engine = create_async_engine(settings.DB_URL, echo=False, future=True)

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π ---
async_session = async_sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π FastAPI."""
    async with async_session() as session:
        yield session


async def wait_for_db_ready(retries: int = 15, delay: int = 3):
    """–ñ–¥—ë—Ç, –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é (–∞–∫—Ç—É–∞–ª—å–Ω–æ –≤ Docker)."""
    for attempt in range(retries):
        try:
            async with async_engine.begin() as conn:
                await conn.run_sync(lambda conn: None)
            print("‚úÖ Database is ready.")
            return
        except Exception as e:
            print(f"‚è≥ Waiting for database... ({attempt + 1}/{retries}) - {e}")
            await asyncio.sleep(delay)
    raise RuntimeError("‚ùå Database connection failed after several attempts.")


async def create_db_and_tables() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ Alembic –µ—â—ë –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω."""
    print("üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
    await wait_for_db_ready()
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
    print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.")
