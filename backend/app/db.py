# mypy: ignore-errors
import asyncio
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlmodel import SQLModel
from app.config import settings
from app.models import *  # noqa: F401, F403

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ ---
engine = create_async_engine(settings.DB_URL, echo=False, future=True)

# --- –°–µ—Å—Å–∏—è ---
async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π."""
    async with async_session() as session:
        yield session


async def wait_for_db_ready(retries: int = 10, delay: int = 3):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î (Postgres –º–æ–∂–µ—Ç –Ω–µ —É—Å–ø–µ—Ç—å –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ Docker)."""
    for attempt in range(retries):
        try:
            async with engine.begin() as conn:
                await conn.run_sync(lambda conn: None)
            print("‚úÖ Database is ready.")
            return
        except Exception as e:
            print(f"‚è≥ Waiting for database... ({attempt + 1}/{retries}) - {e}")
            await asyncio.sleep(delay)
    raise RuntimeError("‚ùå Database connection failed after several attempts.")


async def create_db_and_tables() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    print("üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    await wait_for_db_ready()
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
    print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –≥–æ—Ç–æ–≤—ã.")
