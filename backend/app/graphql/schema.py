import strawberry
from typing import List
from fastapi import Depends, HTTPException # EN: Added HTTPException for auth checks
from strawberry.fastapi import GraphQLRouter
from sqlmodel import select
from sqlalchemy.ext.asyncio import AsyncSession
from ..db import async_session
from ..models import Line, Machine, AuditLog, User # EN: Added AuditLog, User

async def get_session() -> AsyncSession:
    async with async_session() as s:
        yield s

# üí° EN: Context getter must be extended to securely get the authenticated user later
# üí° RU: Context getter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_context(session: AsyncSession = Depends(get_session)):
    # EN: The 'user' field should be populated by an Auth Dependency based on JWT
    # RU: –ü–æ–ª–µ 'user' –¥–æ–ª–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è Auth Dependency –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT
    return {"session": session, "user": User(id=1, email="system@hom.local", hashed_password="mock")} # Mock user for now

# --------------------
# EN: GraphQL Types
# --------------------

@strawberry.type
class LineType:
    id: int
    name: str
    is_deleted: bool # EN: Added soft delete flag
    
@strawberry.type
class MachineType:
    id: int
    asset: str
    line_id: int
    is_deleted: bool # EN: Added soft delete flag

# --------------------
# EN: GraphQL Queries
# --------------------

@strawberry.type
class Query:
    @strawberry.field
    async def lines(self, info) -> List[LineType]:
        session: AsyncSession = info.context["session"]
        # EN: Only select active (non-deleted) lines
        # RU: –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) –ª–∏–Ω–∏–∏
        res = await session.execute(select(Line).where(Line.is_deleted == False))
        return [LineType(id=l.id, name=l.name, is_deleted=l.is_deleted) for l in res.scalars().all()]

    @strawberry.field
    async def machines(self, info) -> List[MachineType]:
        session: AsyncSession = info.context["session"]
        # EN: Only select active (non-deleted) machines
        # RU: –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) —Å—Ç–∞–Ω–∫–∏
        res = await session.execute(select(Machine).where(Machine.is_deleted == False))
        return [MachineType(id=m.id, asset=m.asset, line_id=m.line_id, is_deleted=m.is_deleted) for m in res.scalars().all()]

# --------------------
# EN: GraphQL Mutations (Core MVP Functionality)
# --------------------

@strawberry.type
class Mutation:
    @strawberry.mutation
    async def create_line(self, info, name: str) -> LineType:
        session: AsyncSession = info.context["session"]
        
        # ‚ö†Ô∏è EN: AUTH CHECK (To be fully implemented in Phase 1)
        # ‚ö†Ô∏è RU: –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò (–ë—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –§–∞–∑–µ 1)
        user: User = info.context.get("user")
        if not user:
             # EN: Use 401/403 errors for authentication/authorization
             # RU: –ò—Å–ø–æ–ª—å–∑—É–µ–º 401/403 –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
             raise HTTPException(status_code=401, detail="Authentication required.")
             
        # EN: Core Business Logic: Create new Line
        # RU: –û—Å–Ω–æ–≤–Ω–∞—è –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏
        new_line = Line(name=name)
        session.add(new_line)
        await session.commit()
        await session.refresh(new_line)

        # üí° EN: AUDIT LOGGING: Record the creation event
        # üí° RU: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–£–î–ò–¢–ê: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        audit = AuditLog(
            entity="Line",
            entity_id=str(new_line.id),
            action="CREATE",
            performed_by=user.id,
            diff={"name": name}
        )
        session.add(audit)
        await session.commit()
        
        return LineType(id=new_line.id, name=new_line.name, is_deleted=new_line.is_deleted)

# --------------------
# EN: Final Schema setup
# --------------------
schema = strawberry.Schema(query=Query, mutation=Mutation)

graphql_app = GraphQLRouter(schema, context_getter=get_context)