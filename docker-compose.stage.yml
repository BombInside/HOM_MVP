version: "3.9"

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hom_db}
      POSTGRES_USER: ${POSTGRES_USER:-hom_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hom_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hom_user} -d ${POSTGRES_DB:-hom_db}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  alembic:
    build: .
    command: ["alembic", "upgrade", "head"]
    environment:
      - DB_URL=${DB_URL:-postgresql+asyncpg://hom_user:hom_pass@postgres:5432/hom_db}
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build: .
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    ports:
      - "8000:8000"
    environment:
      - DB_URL=${DB_URL:-postgresql+asyncpg://hom_user:hom_pass@postgres:5432/hom_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - JWT_SECRET=${JWT_SECRET:-secret-key}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    restart: always

volumes:
  postgres_data:
